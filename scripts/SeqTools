#!/usr/bin/env python

from seqtools.seq import SEQ
import argparse
from loguru import logger

def run():
    shared_parser = argparse.ArgumentParser(add_help=False)
    shared_parser.add_argument("-out", "--out_file", dest="out",
                            help="sequence out file with TSV format")
    shared_parser.add_argument("-od", "--out_dir", dest="outdir", default="./",
                            help="out direction")
    argparser_seq = argparse.ArgumentParser(description="seq tools")
    parse_all = argparser_seq.add_subparsers(dest="cmd")
    variation = parse_all.add_parser("variation", parents=[shared_parser], help="sequence variation")
    variation.add_argument("-vi", "--vinfile", dest="vin")
    variation.add_argument("-vr", "--vreplace", dest="vreplace", help="replace base number, like: 1,2,3")
    variation.add_argument("-vd", "--vdict", dest="vdict", help="variation dict, like: '1:A-2:T-3:C-4:G'")


    generator = parse_all.add_parser("generator", parents=[shared_parser], help="generator sequence")
    generator.add_argument("-gt", "--gtype", dest="gtype", choices=["random", "norepeat", "distance"])
    generator.add_argument("-gn", "--gnumber", dest="gnumber", help="sequence number")
    generator.add_argument("-gts", "--gtimes", dest="gtimes", default=None, help="Number of runs")
    generator.add_argument("-gc", "--gchar", dest="gchar", default=None, help="generator charset, like: ATCG")
    generator.add_argument("-gd", "--gdistance", dest="gdistance", default=None, help="distance")
    generator.add_argument("-gl", "--glen", dest="glen", type=int, help="generator sequence length")

    args = argparser_seq.parse_args()

    out = f"{args.out_dir}/{args.out}.tsv"

    fout = open(out, "w")

    Seq = SEQ()

    if args.cmd == "variation":
        list_replace = [int(l_replace) for l_replace in args.vreplace.split(",")]
        list_replace_w = []
        for replace in list_replace:
            list_replace_w.append(f"seq_var{replace}")
        fout.write("seq_raw" + "\t" + "\t".join(list_replace_w) + "\n")

        if args.vdict:
            dict_var = {}
            for base in args.vdict.split("-"):
                dict_var[base.split(":")[0]] = base.split(":")[1]
        else:
            dict_var =None
            

        with open(args.vin, "r") as fv:
            for line in fv:
                if line.startswith("#"):
                    pass
                else:
                    seq = line.strip()
                    seqs_list = Seq.variation(replaces=args.vreplace, seq=seq, dict_variation=dict_var)
                    fout.write(seq + "\t" + "\t".join(seqs_list) + "\n")
    
    elif args.cmd == "generator":
        fout.write(f"#generator_{args.gtype}:seq_len:{args.glen};char_set:{args.char_set};times:{args.times}")
        if args.gtype == "random":
            for seq in Seq.Gseq_random(seq_len=args.glen, char_set=args.char_set, times=args.gtimes):
                fout.write(seq)
        elif args.gtype == "norepeat":
            for seq in Seq.Gseq_norepeat(seq_len=args.glen, char_set=args.char_set, times=args.gtimes):
                fout.write(seq)
        elif args.gtype == "distance":
            for seq in Seq.Gseq_distance(seq_len=args.glen, distance=args.gdistance, char_set=args.char_set, times=args.gtimes):
                fout.write(seq)
        else:
            logger.error("The params(gtype) is error, please check !!!")
            raise ValueError("The params(gtype) is error, please check !!!")

        
    fout.close()

    return


if __name__ == "__main__":
    run()